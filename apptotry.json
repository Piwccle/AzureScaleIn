{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "6647455033781577396"
    }
  },
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "sergio"
    },
    "sshkey": {
      "type": "securestring"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s"
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "scriptTemplate": "#!/bin/bash -x\n\naz login --identity\n\necho \"Hello, I am a Media Node\" > /tmp/hello.txt\n\n# Generate a random number between 100 and 200\nRANDOM_WAIT_TIME=$(( ( RANDOM % 200 )  + 100 ))\n\n# Wait for the random time\nsleep $RANDOM_WAIT_TIME\n\nRESOURCE_GROUP_NAME=${resourceGroupName}\nVM_SCALE_SET_NAME=${vmScaleSetName}\nSUBSCRIPTION_ID=${subscriptionId}\nBEFORE_INSTANCE_ID=$(curl -H Metadata:true --noproxy \"*\" \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | jq -r '.compute.resourceId')\nINSTANCE_ID=$(echo $BEFORE_INSTANCE_ID | awk -F'/' '{print $NF}')\nRESOURCE_ID=/subscriptions/$SUBSCRIPTION_ID/resourcegroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Compute/virtualMachineScaleSets/$VM_SCALE_SET_NAME\n\naz tag update --resource-id $RESOURCE_ID --operation replace --tags \"STATUS\"=\"HEALTHY\"\n\naz vmss delete-instances --resource-group $RESOURCE_GROUP_NAME --name $VM_SCALE_SET_NAME --instance-ids $INSTANCE_ID\n",
    "scriptParams": {
      "subscriptionId": "[subscription().subscriptionId]",
      "resourceGroupName": "[resourceGroup().name]",
      "vmScaleSetName": "myScaleSet"
    },
    "script": "[reduce(items(variables('scriptParams')), createObject('value', variables('scriptTemplate')), lambda('curr', 'next', createObject('value', replace(lambdaVariables('curr').value, format('${{{0}}}', lambdaVariables('next').key), lambdaVariables('next').value)))).value]",
    "base64script": "[base64(variables('script'))]",
    "userDataParams": {
      "base64script": "[variables('base64script')]",
      "subscriptionId": "[subscription().subscriptionId]",
      "resourceGroupName": "[resourceGroup().name]",
      "vmScaleSetName": "myScaleSet"
    },
    "userdataTemplate": "#!/bin/bash -x\nset -u -o pipefail\n\n# Introduce the scripts in the instance\necho ${base64script} | base64 -d > /usr/local/bin/stop_media_node.sh\nchmod +x /usr/local/bin/stop_media_node.sh\n\napt-get update && apt-get install -y \napt-get install -y unzip && apt-get install -y stress && apt-get install -y jq\n\n# Install azure cli\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\naz login --identity \n\nRESOURCE_GROUP_NAME=${resourceGroupName}\nVM_SCALE_SET_NAME=${vmScaleSetName}\nBEFORE_INSTANCE_ID=$(curl -H Metadata:true --noproxy \"*\" \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | jq -r '.compute.resourceId')\nINSTANCE_ID=$(echo $BEFORE_INSTANCE_ID | awk -F'/' '{print $NF}')\n\naz vmss update --resource-group $RESOURCE_GROUP_NAME --name $VM_SCALE_SET_NAME --instance-id $INSTANCE_ID --protect-from-scale-in true\n\nstress --cpu 2 --timeout 600s\n",
    "userData": "[reduce(items(variables('userDataParams')), createObject('value', variables('userdataTemplate')), lambda('curr', 'next', createObject('value', replace(lambdaVariables('curr').value, format('${{{0}}}', lambdaVariables('next').key), lambdaVariables('next').value)))).value]",
    "base64userdata": "[base64(variables('userData'))]",
    "mediaNodeVMSettings": {
      "vmName": "VM-MediaNode",
      "osDiskType": "StandardSSD_LRS",
      "ubuntuOSVersion": {
        "publisher": "Canonical",
        "offer": "0001-com-ubuntu-server-jammy",
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
              "keyData": "[parameters('sshkey')]"
            }
          ]
        }
      }
    },
    "expiryTime": "2035-03-30T00:00:00Z"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "myVnet",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "mySubnet",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-02-01",
      "name": "myNic",
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '2021-02-01').subnets[0].id]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-02-01",
      "name": "myNSG",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSSH",
            "properties": {
              "priority": 1000,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTP",
            "properties": {
              "priority": 1001,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTPS",
            "properties": {
              "priority": 1002,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid('roleAssignmentForScaleSet')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet'), '2024-07-01', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2024-07-01",
      "name": "myScaleSet",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": true,
        "platformFaultDomainCount": 1,
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[variables('mediaNodeVMSettings').osDiskType]"
              },
              "diskSizeGB": 50
            },
            "imageReference": "[variables('mediaNodeVMSettings').ubuntuOSVersion]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('mediaNodeVMSettings').vmName]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('sshkey')]",
            "linuxConfiguration": "[variables('mediaNodeVMSettings').linuxConfiguration]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "mediaNodeNetInterface",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "ipconfigMediaNode",
                      "properties": {
                        "subnet": {
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '2021-02-01').subnets[0].id]"
                        },
                        "publicIPAddressConfiguration": {
                          "name": "publicIPAddressMediaNode",
                          "properties": {
                            "publicIPAddressVersion": "IPv4"
                          }
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNSG')]"
                  }
                }
              }
            ]
          },
          "userData": "[variables('base64userdata')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNSG')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2022-10-01",
      "name": "myAutoscaleSettings",
      "location": "[resourceGroup().location]",
      "properties": {
        "profiles": [
          {
            "name": "openvidu-medianode-autoscale",
            "capacity": {
              "minimum": "[string(1)]",
              "maximum": "[string(10)]",
              "default": "[string(2)]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachineScaleSets",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]",
                  "statistic": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80,
                  "timeAggregation": "Average",
                  "timeWindow": "PT5M",
                  "timeGrain": "PT1M"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachineScaleSets",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]",
                  "statistic": "Average",
                  "operator": "LessThan",
                  "threshold": 60,
                  "timeAggregation": "Average",
                  "timeWindow": "PT5M",
                  "timeGrain": "PT1M"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ],
        "enabled": true,
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid('roleAutomationContributorAssignmentAutomationAccount')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f353d9bd-d4a6-484e-a77a-8050b599b867')]",
        "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', 'myautomationaccount'), '2023-11-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', 'myautomationaccount')]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2023-11-01",
      "name": "myautomationaccount",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "publicNetworkAccess": true,
        "disableLocalAuth": false,
        "sku": {
          "name": "Basic"
        }
      }
    },
    {
      "type": "Microsoft.Automation/automationAccounts/webhooks",
      "apiVersion": "2015-10-31",
      "name": "[format('{0}/{1}', 'myautomationaccount', format('Alert{0}', variables('expiryTime')))]",
      "properties": {
        "expiryTime": "[variables('expiryTime')]",
        "isEnabled": true,
        "runbook": {
          "name": "testscalein"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', 'myautomationaccount')]",
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', 'myautomationaccount', 'testscalein')]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', 'myautomationaccount', 'testscalein')]",
      "location": "westeurope",
      "properties": {
        "publishContentLink": {
          "uri": "https://raw.githubusercontent.com/Piwccle/scaleInRunBook/refs/heads/main/scaleInRunbook.ps1",
          "version": "1.0.0.0"
        },
        "runbookType": "PowerShell72",
        "logVerbose": true,
        "logProgress": true,
        "logActivityTrace": 0
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', 'myautomationaccount')]"
      ]
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "actiongrouptest",
      "location": "global",
      "properties": {
        "groupShortName": "tacg",
        "enabled": true,
        "automationRunbookReceivers": [
          {
            "name": "scalein",
            "useCommonAlertSchema": false,
            "automationAccountId": "[resourceId('Microsoft.Automation/automationAccounts', 'myautomationaccount')]",
            "runbookName": "testscalein",
            "webhookResourceId": "[resourceId('Microsoft.Automation/automationAccounts/webhooks', 'myautomationaccount', format('Alert{0}', variables('expiryTime')))]",
            "isGlobalRunbook": false,
            "serviceUri": "[reference(resourceId('Microsoft.Automation/automationAccounts/webhooks', 'myautomationaccount', format('Alert{0}', variables('expiryTime'))), '2015-10-31').uri]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', 'myautomationaccount')]",
        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', 'myautomationaccount', format('Alert{0}', variables('expiryTime')))]"
      ]
    },
    {
      "type": "Microsoft.Insights/activityLogAlerts",
      "apiVersion": "2020-10-01",
      "name": "ScaleInAlertRule",
      "location": "[variables('location')]",
      "properties": {
        "scopes": [
          "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
        ],
        "condition": {
          "allOf": [
            {
              "field": "category",
              "equals": "Administrative"
            },
            {
              "field": "operationName",
              "equals": "Microsoft.Compute/virtualMachineScaleSets/write"
            },
            {
              "field": "level",
              "containsAny": [
                "error"
              ]
            },
            {
              "field": "status",
              "containsAny": [
                "failed"
              ]
            },
            {
              "field": "caller",
              "equals": "42628537-ebd8-40bf-941a-dddd338e1fe9"
            }
          ]
        },
        "actions": {
          "actionGroups": [
            {
              "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', 'actiongrouptest')]"
            }
          ]
        },
        "enabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', 'actiongrouptest')]",
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    }
  ]
}