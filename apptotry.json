{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "3403191620651153442"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser"
    },
    "sshkey": {
      "type": "securestring"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s"
    }
  },
  "variables": {
    "nodescript": "const express = require('express');\r\nconst os = require('os');\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.get('/', (req, res) => {\r\n    const localIP = getLocalIP();\r\n    res.send(`\r\n        <html>\r\n            <body>\r\n                <h1>Node.js App</h1>\r\n                <p>IP Address: ${localIP}</p>\r\n                <button onclick=\"fetch('/shutdown', { method: 'POST' })\">Shutdown</button>\r\n            </body>\r\n        </html>\r\n    `);\r\n});\r\n\r\napp.post('/shutdown', (req, res) => {\r\n    res.send('Shutting down...');\r\n    process.exit();\r\n});\r\n\r\nfunction getLocalIP() {\r\n    const interfaces = os.networkInterfaces();\r\n    for (const name of Object.keys(interfaces)) {\r\n        for (const iface of interfaces[name]) {\r\n            if (iface.family === 'IPv4' && !iface.internal) {\r\n                return iface.address;\r\n            }\r\n        }\r\n    }\r\n    return '127.0.0.1';\r\n}\r\n\r\napp.listen(port, () => {\r\n    const localIP = getLocalIP();\r\n    console.log(`App listening at http://${localIP}:${port}`);\r\n}); \r\n",
    "base64nodescript": "[base64(variables('nodescript'))]",
    "jsonForProtectionScaleIn": "  {\r\n    \"properties\": {\r\n      \"protectionPolicy\": {\r\n        \"protectFromScaleIn\": true\r\n      }\r\n    }        \r\n  }\r\n",
    "base64jsonForProtectionScaleIn": "[base64(variables('jsonForProtectionScaleIn'))]",
    "userDataParams": {
      "base64nodescript": "[variables('base64nodescript')]",
      "base64jsonForProtectionScaleIn": "[variables('base64jsonForProtectionScaleIn')]"
    },
    "userdataTemplate": "#!/bin/bash -x\r\nset -eu -o pipefail\r\n\r\n# Introduce the scripts in the instance\r\n# app.js\r\necho ${base64nodescript} | base64 -d > /usr/local/bin/app.js\r\nchmod +x /usr/local/bin/app.js\r\n\r\necho ${base64jsonForProtectionScaleIn} | base64 -d > /usr/local/bin/jsonForProtectionScaleIn.json\r\n\r\napt-get update && apt-get install -y \r\n\r\n# Install Node.js\r\ncurl -o- https://fnm.vercel.app/install | bash\r\nfnm install 22\r\n\r\n# Install azure cli\r\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\r\n\r\naz login --identity --allow-no-subscriptions\r\n\r\n# Make a PUT request to the Azure REST API to update the VM instance with protection policy\r\ncurl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer $(az account get-access-token --query accessToken -o tsv)\" \\\r\n\"${environment().resourceManager}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instance-id}?api-version=2019-03-01\" \\\r\n-d @/usr/local/bin/jsonForProtectionScaleIn.json\r\n\r\nexport HOME=\"/root\"\r\n\r\n#start nodeapp\r\nnode /usr/local/bin/app.js\r\n",
    "userData": "[reduce(items(variables('userDataParams')), createObject('value', variables('userdataTemplate')), lambda('curr', 'next', createObject('value', replace(lambdaVariables('curr').value, format('${{{0}}}', lambdaVariables('next').key), lambdaVariables('next').value)))).value]",
    "base64userdata": "[base64(variables('userData'))]",
    "mediaNodeVMSettings": {
      "vmName": "VM-MediaNode",
      "osDiskType": "StandardSSD_LRS",
      "ubuntuOSVersion": {
        "publisher": "Canonical",
        "offer": "0001-com-ubuntu-server-jammy",
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
              "keyData": "[parameters('sshkey')]"
            }
          ]
        }
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "myVnet",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "mySubnet",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-02-01",
      "name": "myNic",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '2021-02-01').subnets[0].id]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-02-01",
      "name": "myNSG",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSSH",
            "properties": {
              "priority": 1000,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTP",
            "properties": {
              "priority": 1001,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTPS",
            "properties": {
              "priority": 1002,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2024-07-01",
      "name": "myScaleSet",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": true,
        "platformFaultDomainCount": 1,
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[variables('mediaNodeVMSettings').osDiskType]"
              },
              "diskSizeGB": 50
            },
            "imageReference": "[variables('mediaNodeVMSettings').ubuntuOSVersion]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('mediaNodeVMSettings').vmName]",
            "adminPassword": "[parameters('sshkey')]",
            "linuxConfiguration": "[variables('mediaNodeVMSettings').linuxConfiguration]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "mediaNodeNetInterface",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "ipconfigMediaNode",
                      "properties": {
                        "subnet": {
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '2021-02-01').subnets[0].id]"
                        },
                        "publicIPAddressConfiguration": {
                          "name": "publicIPAddressMediaNode",
                          "properties": {
                            "publicIPAddressVersion": "IPv4"
                          }
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNSG')]"
                  }
                }
              }
            ]
          },
          "userData": "[variables('base64userdata')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNSG')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2022-10-01",
      "name": "myAutoscaleSettings",
      "location": "[resourceGroup().location]",
      "properties": {
        "profiles": [
          {
            "name": "openvidu-medianode-autoscale",
            "capacity": {
              "minimum": "[string(1)]",
              "maximum": "[string(10)]",
              "default": "[string(1)]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachineScaleSets",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]",
                  "statistic": "Average",
                  "operator": "GreaterThan",
                  "threshold": 50,
                  "timeAggregation": "Average",
                  "timeWindow": "PT5M",
                  "timeGrain": "PT1M"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachineScaleSets",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]",
                  "statistic": "Average",
                  "operator": "LessThan",
                  "threshold": 50,
                  "timeAggregation": "Average",
                  "timeWindow": "PT5M",
                  "timeGrain": "PT1M"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ],
        "enabled": true,
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "myFunctionApp",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "myAppServicePlan",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "DefaultEndpointsProtocol=https;AccountName=yourstorageaccount;AccountKey=yourstorageaccountkey;EndpointSuffix=core.windows.net"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~14"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.EventGrid/eventSubscriptions",
      "apiVersion": "2021-06-01-preview",
      "scope": "/",
      "name": "myEventGridSubscription",
      "properties": {
        "destination": {
          "endpointType": "AzureFunction",
          "properties": {
            "resourceId": "[resourceId('Microsoft.Web/sites', 'myFunctionApp')]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Compute/virtualMachineScaleSets/vm/scaleIn/action"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', 'myFunctionApp')]"
      ]
    }
  ]
}