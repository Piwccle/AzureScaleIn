{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "18115662890170591491"
    }
  },
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "sergio"
    },
    "sshkey": {
      "type": "securestring"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s"
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "nodescript": "const express = require('express');\nconst os = require('os');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n    const localIP = getLocalIP();\n    res.send(`\n        <html>\n            <body>\n                <h1>Node.js App</h1>\n                <p>IP Address: ${localIP}</p>\n                <button onclick=\"fetch('/shutdown', { method: 'POST' })\">Shutdown</button>\n            </body>\n        </html>\n    `);\n});\n\napp.post('/shutdown', (req, res) => {\n    res.send('Shutting down...');\n    process.exit();\n});\n\nfunction getLocalIP() {\n    const interfaces = os.networkInterfaces();\n    for (const name of Object.keys(interfaces)) {\n        for (const iface of interfaces[name]) {\n            if (iface.family === 'IPv4' && !iface.internal) {\n                return iface.address;\n            }\n        }\n    }\n    return '127.0.0.1';\n}\n\napp.listen(port, () => {\n    const localIP = getLocalIP();\n    console.log(`App listening at http://${localIP}:${port}`);\n}); \n",
    "base64nodescript": "[base64(variables('nodescript'))]",
    "jsonForProtectionScaleIn": "  {\n    \"properties\": {\n      \"protectionPolicy\": {\n        \"protectFromScaleIn\": true\n      }\n    }        \n  }\n",
    "base64jsonForProtectionScaleIn": "[base64(variables('jsonForProtectionScaleIn'))]",
    "userDataParams": {
      "base64nodescript": "[variables('base64nodescript')]",
      "base64jsonForProtectionScaleIn": "[variables('base64jsonForProtectionScaleIn')]",
      "subscriptionId": "[subscription().subscriptionId]",
      "resourceGroupName": "[resourceGroup().name]",
      "vmScaleSetName": "myScaleSet",
      "resourceManager": "[environment().resourceManager]"
    },
    "userdataTemplate": "#!/bin/bash -x\nset -u -o pipefail\n\n# Introduce the scripts in the instance\n# app.js\necho ${base64nodescript} | base64 -d > /usr/local/bin/app.js\nchmod +x /usr/local/bin/app.js\n\necho ${base64jsonForProtectionScaleIn} | base64 -d > /usr/local/bin/jsonForProtectionScaleIn.json\n\napt-get update && apt-get install -y \napt-get install -y unzip && apt-get install -y stress && apt-get install -y jq\n\n# Install azure cli\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n#az login --identity \n#az vmss update --resource-group $RESOURCE_GROUP_NAME --name $VM_SCALE_SET_NAME --instance-id $INSTANCE_ID --protect-from-scale-in true\n\naz login --identity --allow-no-subscriptions\n\nBEFORE_INSTANCE_ID=$(curl -H Metadata:true --noproxy \"*\" \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | jq -r '.compute.resourceId')\nINSTANCE_ID=$(echo $BEFORE_INSTANCE_ID | awk -F'/' '{print $NF}')\n\nSUBSCRIPTION_ID=${subscriptionId}\nRESOURCE_GROUP_NAME=${resourceGroupName}\nVM_SCALE_SET_NAME=${vmScaleSetName}\nRESOURCE_MANAGER=${resourceManager}\n\n# Suposse that works and applies the protection policy\n\n# Make a PUT request to the Azure REST API to update the VM instance with protection policy\n#curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer $(az account get-access-token --query accessToken -o tsv)\" \\\n#\"https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Compute/virtualMachineScaleSets/$VM_SCALE_SET_NAME/virtualMachines/$INSTANCE_ID?api-version=2019-03-01\" \\\n#-d @/usr/local/bin/jsonForProtectionScaleIn.json\n\n\nexport HOME=/home/sergio\n\n# Install Node.js\napt install -y nodejs && apt install -y npm\n\n#start nodeapp\ncd /usr/local/bin\nnpm install express\nnode /usr/local/bin/app.js\n",
    "userData": "[reduce(items(variables('userDataParams')), createObject('value', variables('userdataTemplate')), lambda('curr', 'next', createObject('value', replace(lambdaVariables('curr').value, format('${{{0}}}', lambdaVariables('next').key), lambdaVariables('next').value)))).value]",
    "base64userdata": "[base64(variables('userData'))]",
    "mediaNodeVMSettings": {
      "vmName": "VM-MediaNode",
      "osDiskType": "StandardSSD_LRS",
      "ubuntuOSVersion": {
        "publisher": "Canonical",
        "offer": "0001-com-ubuntu-server-jammy",
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
              "keyData": "[parameters('sshkey')]"
            }
          ]
        }
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "myVnet",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "mySubnet",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-02-01",
      "name": "myNic",
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '2021-02-01').subnets[0].id]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-02-01",
      "name": "myNSG",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSSH",
            "properties": {
              "priority": 1000,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTP",
            "properties": {
              "priority": 1001,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTPS",
            "properties": {
              "priority": 1002,
              "direction": "Inbound",
              "access": "Allow",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "roleAssignmentForScaleSet",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet'), '2024-07-01', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2024-07-01",
      "name": "myScaleSet",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": true,
        "platformFaultDomainCount": 1,
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[variables('mediaNodeVMSettings').osDiskType]"
              },
              "diskSizeGB": 50
            },
            "imageReference": "[variables('mediaNodeVMSettings').ubuntuOSVersion]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('mediaNodeVMSettings').vmName]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('sshkey')]",
            "linuxConfiguration": "[variables('mediaNodeVMSettings').linuxConfiguration]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "mediaNodeNetInterface",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "ipconfigMediaNode",
                      "properties": {
                        "subnet": {
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '2021-02-01').subnets[0].id]"
                        },
                        "publicIPAddressConfiguration": {
                          "name": "publicIPAddressMediaNode",
                          "properties": {
                            "publicIPAddressVersion": "IPv4"
                          }
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNSG')]"
                  }
                }
              }
            ]
          },
          "userData": "[variables('base64userdata')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNSG')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2022-10-01",
      "name": "myAutoscaleSettings",
      "location": "[resourceGroup().location]",
      "properties": {
        "profiles": [
          {
            "name": "openvidu-medianode-autoscale",
            "capacity": {
              "minimum": "[string(1)]",
              "maximum": "[string(10)]",
              "default": "[string(2)]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachineScaleSets",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]",
                  "statistic": "Average",
                  "operator": "GreaterThan",
                  "threshold": 50,
                  "timeAggregation": "Average",
                  "timeWindow": "PT5M",
                  "timeGrain": "PT1M"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachineScaleSets",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]",
                  "statistic": "Average",
                  "operator": "LessThan",
                  "threshold": 50,
                  "timeAggregation": "Average",
                  "timeWindow": "PT5M",
                  "timeGrain": "PT1M"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ],
        "enabled": true,
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "roleAssignmentForAutomationAccount",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', 'myAutomationAccount'), '2024-10-23', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', 'myAutomationAccount')]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2024-10-23",
      "name": "myAutomationAccount",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Basic"
        }
      }
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "actiongrouptest",
      "location": "global",
      "properties": {
        "groupShortName": "tacg",
        "enabled": true,
        "automationRunbookReceivers": [
          {
            "name": "scalein",
            "serviceUri": "https://bd0918eb-a0fe-48c6-b995-432f2f824ca3.webhook.ne.azure-automation.net/webhooks?token=qsl2S7COZrCX%2btafA%2bVIDtDK0WgLXC7gVHP%2fhHbFf6Y%3d",
            "useCommonAlertSchema": false,
            "automationAccountId": "[resourceId('Microsoft.Automation/automationAccounts', 'myAutomationAccount')]",
            "runbookName": "testrunbook",
            "webhookResourceId": "[format('{0}/webhooks/Alert1742494428933', resourceId('Microsoft.Automation/automationAccounts', 'myAutomationAccount'))]",
            "isGlobalRunbook": false
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', 'myAutomationAccount')]"
      ]
    },
    {
      "type": "Microsoft.Insights/activityLogAlerts",
      "apiVersion": "2023-01-01-preview",
      "name": "ScaleInAlertRule",
      "location": "[variables('location')]",
      "properties": {
        "scopes": [
          "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
        ],
        "condition": {
          "allOf": [
            {
              "field": "category",
              "equals": "Administrative"
            },
            {
              "field": "operationName",
              "equals": "Microsoft.Compute/virtualMachineScaleSets/write"
            },
            {
              "field": "level",
              "containsAny": [
                "error"
              ]
            },
            {
              "field": "status",
              "containsAny": [
                "failed"
              ]
            },
            {
              "field": "caller",
              "equals": "42628537-ebd8-40bf-941a-dddd338e1fe9"
            }
          ]
        },
        "actions": {
          "actionGroups": [
            {
              "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', 'actiongrouptest')]"
            }
          ]
        },
        "enabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', 'actiongrouptest')]",
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', 'myScaleSet')]"
      ]
    }
  ]
}